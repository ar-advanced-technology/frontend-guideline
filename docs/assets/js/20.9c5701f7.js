(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{372:function(t,v,_){"use strict";_.r(v);var a=_(42),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"設計とは何か？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#設計とは何か？"}},[t._v("#")]),t._v(" 設計とは何か？")]),t._v(" "),_("h2",{attrs:{id:"はじめに"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#はじめに"}},[t._v("#")]),t._v(" はじめに")]),t._v(" "),_("p",[t._v("CSS は誰でも簡単に、自由に書くことができます。Java 言語のような型制約もありません。だからといって好き勝手に書いてしまうと、後にさまざまな混乱や問題に悩まされるでしょう。")]),t._v(" "),_("p",[t._v("不十分な設計による失敗：")]),t._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),_("ul",[_("li",[t._v("後からコードを見返したときに読み解くことができない")]),t._v(" "),_("li",[t._v("第三者への情報共有・引き継ぎが困難")]),t._v(" "),_("li",[t._v("パーツが再利用できず、修正のたびにコードを追加")]),t._v(" "),_("li",[t._v("スタイルの上書きが頻繁に行われている、!importantを多用している")]),t._v(" "),_("li",[t._v("修正した部分が意図しない箇所にも影響してしまう")]),t._v(" "),_("li",[t._v("何のために使っているか分からないスタイルが存在する")])]),t._v(" "),_("p",[t._v("etc...")])]),t._v(" "),_("p",[t._v("逆に、思慮深く設計された CSS がもたらす恩恵は：")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("ul",[_("li",[t._v("予測しやすい\n"),_("ul",[_("li",[t._v("予測した通りに動いてくれること")]),t._v(" "),_("li",[t._v("他者が読んでも理解しやすいこと")])])]),t._v(" "),_("li",[t._v("再利用しやすい\n"),_("ul",[_("li",[t._v("必要以上にコードを書かずに済む")])])]),t._v(" "),_("li",[t._v("保守しやすい\n"),_("ul",[_("li",[t._v("コードの修正や追加が簡単に行えること")])])]),t._v(" "),_("li",[t._v("拡張しやすい")])])]),t._v(" "),_("p",[t._v("このガイドラインは、主に CSS や HTML を用いたフロントエンドコーディングにおける、設計と実装の方法を記載しています。")]),t._v(" "),_("p",[t._v("また、対象は Web アプリケーションの UI コーディングです。ただし一枚もののランディングページ（LP）やキャンペーンサイトについても、記載内容のほとんどを適用できるはずです。")]),t._v(" "),_("h2",{attrs:{id:"アプリケーションは変化する"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#アプリケーションは変化する"}},[t._v("#")]),t._v(" アプリケーションは変化する")]),t._v(" "),_("p",[t._v("業務システムや EC サイトなどの Web アプリケーションは、完成することがありません。いったんリリースされてからも、不具合の修正やユーザーからのフィードバックをもとに機能追加が行われ、ブラッシュアップされていきます。アプリケーションは、使われ続ける限り、変化を繰り返して成長します。")]),t._v(" "),_("p",[t._v("設計とは、将来の変更に備えることです。")]),t._v(" "),_("p",[t._v("設計の目的は、"),_("strong",[t._v("出来るだけ少ない工数や影響範囲で将来の変更を実現すること")]),t._v("です。")]),t._v(" "),_("p",[t._v("この「出来るだけ少ない工数や影響範囲で将来の変更を実現」できること、またその度合いを、"),_("strong",[t._v("保守性")]),t._v("（メンテナンス性）という言葉で表現することもあります。")]),t._v(" "),_("h2",{attrs:{id:"コンポーネント指向"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#コンポーネント指向"}},[t._v("#")]),t._v(" コンポーネント指向")]),t._v(" "),_("h3",{attrs:{id:"コンポーネント指向とは"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#コンポーネント指向とは"}},[t._v("#")]),t._v(" コンポーネント指向とは")]),t._v(" "),_("p",[t._v("上記の目的を達成するために、このガイドでは、"),_("strong",[t._v("コンポーネント指向")]),t._v("という考え方を採用します。")]),t._v(" "),_("p",[t._v("コンポーネント指向とは、Web アプリケーションの UI を、コンポーネントの集合体として捉える考え方です。ページを組むのではなく、コンポーネントを組む、組んだコンポーネントを集めた結果としてページが出来上がるイメージです。")]),t._v(" "),_("p",[t._v("コンポーネントとは、Web アプリケーションの UI を構成する部品です。具体的には、見出しやボタン、テキストボックス、テーブル、リンクなどです。")]),t._v(" "),_("p",[t._v("具体的な手順は後述しますが、ざっくりいうと...")]),t._v(" "),_("ol",[_("li",[t._v("デザインファイルの全体を見渡す。")]),t._v(" "),_("li",[t._v("視覚的な抽象化を行う。つまり、デザインファイル全体の中で特定の同一性をもつ部分を見つけ、コンポーネントとして切り出して名前をつける。")]),t._v(" "),_("li",[t._v("コンポーネントの文書構造を HTML によって記述する。また、視覚表現を CSS によって記述する。")])]),t._v(" "),_("h3",{attrs:{id:"なぜコンポーネント指向？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#なぜコンポーネント指向？"}},[t._v("#")]),t._v(" なぜコンポーネント指向？")]),t._v(" "),_("p",[t._v("ページ数の多い本格的な Web アプリケーションでも、何種類かのコンポーネントの集合としてページが成り立っています。")]),t._v(" "),_("p",[t._v("機能の追加や修正が発生するとページの項目は変わっていきますが、コンポーネント自体はそこまで頻繁に変わりません。たとえば機能追加のたびに新しいデザインのボタンが増えたら、統一感がなくなって、使いづらいアプリになってしまいますよね。")]),t._v(" "),_("p",[t._v("また仮にコンポーネントに変更が加わるなら、その変更には一貫性があるべきです。たとえば入力欄のデザインを変更する必要があるなら、すべてのページのすべての入力欄が同様に変更されるべきです。")]),t._v(" "),_("p",[t._v("そのため、コンポーネントにフォーカスすることが重要になってきます。変更のたびにいちいちページごとに新しく考え直すよりも、効率的なのです。")]),t._v(" "),_("p",[t._v("コンポーネントの設計をしっかり行うことで、どんな規模のアプリケーションでも効率よく開発を行うことができます。")]),t._v(" "),_("h3",{attrs:{id:"コンポーネント指向の実例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#コンポーネント指向の実例"}},[t._v("#")]),t._v(" コンポーネント指向の実例")]),t._v(" "),_("p",[t._v("以下のような "),_("strong",[t._v("CSS フレームワーク")]),t._v("は、コンポーネント指向のもっとも分かりやすい実践例と言えるでしょう。")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://getbootstrap.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bootstrap"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://bulma.io/documentation/components/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bulma"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://foundation.zurb.com/sites/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Foundation"),_("OutboundLink")],1)])]),t._v(" "),_("p",[t._v("CSS フレームワークとは、作り置きのコンポーネントのスタイル定義セットです。特定のサイトでの利用を想定しておらず、汎用的に作られています。そのため、デザインは簡素ですが、文脈に依存しない、独立性の高い設計がなされています。")]),t._v(" "),_("p",[t._v("このガイドにおける CSS 設計は、上記のフレームワークを大いに模倣しています。少々乱暴ですが、設計の目標は「特定のアプリ用の CSS フレームワークを作ること」とも言えるでしょう。")])])}),[],!1,null,null,null);v.default=r.exports}}]);